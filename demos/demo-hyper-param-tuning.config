#!crnn.py
# kate: syntax python;
# base of this is demo-tf-native-lstm2.12ax.config

use_tensorflow = True

from HyperParamTuning import HyperParam
import os
demo_name, _ = os.path.splitext(__file__)
print("Hello, experiment: %s" % demo_name)

#task = "train"
task = "hyper_param_tuning"
train = {"class": "Task12AXDataset", "num_seqs": 1000}
dev = {"class": "Task12AXDataset", "num_seqs": 100, "fixed_random_seed": 1}

num_inputs = 9
num_outputs = 2
batching = "random"
batch_size = 5000
max_seqs = 10
chunking = "200:200"

network = {
"fw0": {
    "class": "rec", "unit": "nativelstm2",
    "dropout": HyperParam(float, [0, 1]),
    "n_out": HyperParam(int, [1, 100]),
    "L2": HyperParam(float, [0, 1], log=True)
    },
"output": {
    "class": "softmax", "loss": "ce", "from": ["fw0"],
    "dropout": HyperParam(float, [0, 1]),
    "L2": HyperParam(float, [0, 1], log=True)}
}

# training
adam = True
optimizer_epsilon = HyperParam(float, [1e-16, 1], log=True)
decouple_constraints = HyperParam(bool)
learning_rate = HyperParam(float, [1e-6, 1], log=True)
model = "/tmp/%s/crnn/%s/model" % (os.getlogin(), demo_name)  # https://github.com/tensorflow/tensorflow/issues/6537
num_epochs = 100
save_interval = 1
gradient_clip = HyperParam(float, [1e-3, 100], log=True)
gradient_clip_norm = HyperParam(float, [1e-3, 100], log=True)
gradient_noise = HyperParam(float, [0, 1])

# hyper param tuning
hyper_param_tuning = {
    "num_train_steps": 50,
    "num_tune_iterations": 3,  # 100,
    "num_individuals": 20
}

# log
log_verbosity = 3
